/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #include <dt-bindings/zmk/matrix_transform.h>
 /* #include "jaan-layouts.dtsi" */

 / {
     chosen {
         zmk,kscan = &kscan0;
         zmk,matrix-transform = &default_transform;
          /* zephyr,display = &oled; */
         /* zephyr,display = &ssd1306_ssd1306_128x64_spi; */
     };

     default_transform: keymap_transform_0 {
         compatible = "zmk,matrix-transform";
         columns = <12>;
         rows = <4>;
 //                     |  SW03   |  SW04   |   SW05   |                      |  SW05   |  SW04   |  SW03   |
 //                     --------------------------------                      -------------------------------
 //   |  SW01  |  SW02  |  SW09   |  SW10   |   SW11   |  SW06  |    |  SW06  |  SW11   |  SW10   |  SW09   |   SW02   |  SW01  |
 //   |  SW07  |  SW08  |  SW15   |  SW16   |   SW17   |  SW12  |    |  SW12  |  SW17   |  SW16   |  SW15   |   SW08   |  SW07  |
 //            |  SW14  |  SW21   |  SW22   |   SW23   |  SW18  |    |  SW18  |  SW23   |  SW22   |  SW21   |   SW14   |
 //                                                    ----------    ----------
 //                                                    |  SW24  |    |  SW24  |
 //                               |  SW13   |   SW19   |  SW20  |    |  SW20  |  SW19   |  SW13   |
         map = <
                          RC(0,2)   RC(0,3)   RC(0,4)                           RC(0,7)   RC(0,8)   RC(0,9)
      RC(0,0)   RC(0,1)   RC(1,2)   RC(1,3)   RC(1,4)   RC(0,5)       RC(0,6)   RC(1,7)   RC(1,8)   RC(1,9)   RC(0,10)   RC(0,11)
      RC(1,0)   RC(1,1)   RC(2,2)   RC(2,3)   RC(2,4)   RC(1,5)       RC(1,6)   RC(2,7)   RC(2,8)   RC(2,9)   RC(1,10)   RC(1,11)
                RC(2,1)   RC(3,2)   RC(3,3)   RC(3,4)   RC(2,5)       RC(2,6)   RC(3,7)   RC(3,8)   RC(3,9)   RC(2,10)
                                                        RC(3,5)       RC(3,6)
                                    RC(2,0)   RC(3,0)   RC(3,1)       RC(3,10)  RC(3,11)  RC(2,11)
         >;
     };

     kscan0: kscan {
         compatible = "zmk,kscan-gpio-matrix";

         diode-direction = "col2row";
         row-gpios
             = <&pro_micro  6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
             , <&pro_micro  8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
             , <&pro_micro  9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
             , <&pro_micro 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
             ;

     };
 };

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
                <NRF_PSEL(SPIM_MOSI, 0, 17)>,
                <NRF_PSEL(SPIM_MISO, 0, 25)>;
        };
    };
    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
                <NRF_PSEL(SPIM_MOSI, 0, 17)>,
                <NRF_PSEL(SPIM_MISO, 0, 25)>;
            low-power-enable;
        };
    };
};

nice_view_spi: &spi0 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&pro_micro 4 GPIO_ACTIVE_HIGH>;
};

&pro_micro_i2c {
    status = "disabled";
};

 /* &pro_micro_i2c { */
 /*     status = "okay"; */

 /*     oled: ssd1306@3c { */
 /*         compatible = "solomon,ssd1306fb"; */
 /*         reg = <0x3c>; */
 /*         width = <128>; */
 /*         height = <32>; */
 /*         segment-offset = <0>; */
 /*         page-offset = <0>; */
 /*         display-offset = <0>; */
 /*         multiplex-ratio = <31>; */
 /*         segment-remap; */
 /*         com-invdir; */
 /*         com-sequential; */
 /*         inversion-on; */
 /*         prechargep = <0x22>; */
 /*     }; */
 /* }; */


         // map = <
 // RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)  RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
 // RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)  RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
 // RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)  RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
         //                 RC(3,3) RC(3,4) RC(3,5)  RC(3,6) RC(3,7) RC(3,8)
         // >;
